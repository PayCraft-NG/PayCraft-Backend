version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: paycraft-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: paycraft_db
      MYSQL_USER: paycraft_user
      MYSQL_PASSWORD: paycraft_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./src/main/resources/schema:/docker-entrypoint-initdb.d
    networks:
      - paycraft-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # PayCraft Backend Application
  paycraft-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: paycraft-backend
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      # Database Configuration
      DATABASE_NAME: paycraft_db
      DATABASE_USERNAME: paycraft_user
      DATABASE_DEV_PASSWORD: paycraft_password
      
      # Security
      SECRET_STRING: 
      ENCRYPTION_KEY: 
      
      # KoraPay Configuration (Use test keys)
      KORA_SECRET_KEY: 
      KORA_PUBLIC_KEY: 
      
      # Email Configuration
      EMAIL_SENDER: noreply@paycraft.com
      EMAIL_PASSWORD: your_app_password_here
      
      # Frontend URL
      FRONTEND_URL: http://localhost:3000
      
      # Webhook URLs
      WEBHOOK_URL: http://localhost:6020
      WEBHOOK_DEV_URL: http://localhost:6020/webhook/
      
      # Spring Profile
      SPRING_PROFILES_ACTIVE: dev
      
      # Database URL for Docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/paycraft_db
      SPRING_DATASOURCE_USERNAME: paycraft_user
      SPRING_DATASOURCE_PASSWORD: paycraft_password
      
    ports:
      - "6020:6020"
    networks:
      - paycraft-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6020/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Redis (for caching - optional enhancement)
  redis:
    image: redis:7-alpine
    container_name: paycraft-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - paycraft-network
    command: redis-server --requirepass 

  # Nginx Reverse Proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: paycraft-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - paycraft-backend
    networks:
      - paycraft-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  paycraft-network:
    driver: bridge
